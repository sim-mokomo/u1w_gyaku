@startuml
namespace Player {
    interface IDamageable{
        abstract ApplyDamage()
    }
    
    class PlayerController{

    }
    
    class PlayerMover {
        Move()
    }
    class PlayerShooter{
        Eim()
        Shot()
    }
    class PlayerPickUpper{
        PickUp()
    }
    
    class PlayerInput{
    
    }

    PlayerController --|> PlayerMover
    PlayerController --|> PlayerShooter
    PlayerController --|> PlayerPickUpper
    PlayerController --|> PlayerInput
    
    PlayerController --|> HP.HpPresenter
    
    PlayerController --> IDamageable
    PlayerShooter --|> Enemy.IDamageable
    
    PlayerController --|> Gun.IPickUpable
    PlayerController --|> Gun.IAttackable
}

namespace HP{ 
    class HpPresenter{   
    
    }
    
    class HpView{
    
    }
    
    HpPresenter --|> HpView
    
    HpPresenter --|> GameEnd.GameEndPresenter
}

namespace Gun{
    interface IPickUpable{
        abstract PickUp()
    }
    
    interface IAttackable{
        abstract Attack()
    }
    
    abstract class BaseGun{
        ammoValue
        
        ShotBulllet()
    }
    
    class HandGun{
    
    }
    
    class MachineGun{
    
    }
    
    class Bazooka{
    
    }
    
    class ExplosionBullet{
    
    }
    
    BaseGun --> IAttackable
    BaseGun <-- HandGun
    BaseGun <-- MachineGun
    BaseGun <-- Bazooka
    
    Bazooka --|> ExplosionBullet
    ExplosionBullet --|> Enemy.IDamageable
    
    BaseGun --> IPickUpable
}

namespace Enemy{
    interface IDamageable{
        abstract ApplyDamage()
    }
    
    abstract class BaseEnemy{
        HpValue
        attackPower
    }
    
    class NormalEnemy{
    
    }
    
    class LongRangeEnemy{
    
    }
    
    class StrongEnemy{
     
    }
    
    class BossEnemy{
    
    }
    
    class EnemyMover{
    
    }
    
    class EnemyAttacker{
    
    }
    
    class EnemyShooter{
        
    }

    class Wave{
    
    }
    
    class EnemySpawner{
    
    }
    BaseEnemy <-- NormalEnemy
    BaseEnemy <-- LongRangeEnemy
    BaseEnemy <-- StrongEnemy
    BaseEnemy <-- BossEnemy
    
    NormalEnemy --|> EnemyAttacker
    NormalEnemy --|> EnemyMover
    
    LongRangeEnemy --|> EnemyShooter   
    
    StrongEnemy --|> EnemyMover
    
    Wave --|> EnemySpawner
    Wave --|> GameEnd.GameEndPresenter 
    
    BaseEnemy --> IDamageable
    
    Wave --|> Manager.GameStateManager
    
    EnemyAttacker --|> Manager.DamageManager
    EnemyShooter --|> Manager.DamageManager 
    
    EnemySpawner --|> BaseEnemy
}
namespace Timer{
    class TimerPresenter{
    
    }
    
    class TimerView{
    
    }
    
    class TimerModel{
    
    }
    
    TimerPresenter --|> TimerView
    TimerPresenter --|> TimerModel
}

namespace GameEnd{
    class GameEndPresenter{
        
    }
    class GameClearView{
        
    }
    class GameOverView{
    
    }
    GameEndPresenter --|> GameClearView
    GameEndPresenter --|> GameOverView
    
    GameEndPresenter --|> Timer.TimerPresenter 
}

namespace Manager{
    class GameStateManager{

    }
    
    class DamageManager{
        
    }
    
    class AudioManager{
        seTable 
        bgmTable
        PlaySE()
        PlayBGM()
    }
    
    GameStateManager --|> Player.PlayerController
    DamageManager --|> Player.IDamageable
}
@enduml